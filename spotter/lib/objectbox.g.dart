// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/task_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2432166687953516652),
      name: 'Task',
      lastPropertyId: const IdUid(5, 3464322506574893699),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2298319077664181108),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3211315776754532028),
            name: 'taskDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6907622731959549502),
            name: 'taskGroup',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4371495459484611180),
            name: 'completed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3464322506574893699),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2244299741876127042),
      name: 'TaskGroup',
      lastPropertyId: const IdUid(2, 3245963186454929968),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5149661405858191867),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3245963186454929968),
            name: 'taskGroup',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 2244299741876127042),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [8108166947537495174],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8985378110078263766, 3744637546667393341],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Task: EntityDefinition<Task>(
        model: _entities[0],
        toOneRelations: (Task object) => [],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final taskDescriptionOffset = fbb.writeString(object.taskDescription);
          final taskGroupOffset = fbb.writeString(object.taskGroup);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskDescriptionOffset);
          fbb.addOffset(2, taskGroupOffset);
          fbb.addBool(3, object.completed);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Task(
              taskDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              taskGroup: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              completed: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    TaskGroup: EntityDefinition<TaskGroup>(
        model: _entities[1],
        toOneRelations: (TaskGroup object) => [],
        toManyRelations: (TaskGroup object) => {},
        getId: (TaskGroup object) => object.id,
        setId: (TaskGroup object, int id) {
          object.id = id;
        },
        objectToFB: (TaskGroup object, fb.Builder fbb) {
          final taskGroupOffset = fbb.writeString(object.taskGroup);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskGroupOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskGroup(
              taskGroup: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// see [Task.taskDescription]
  static final taskDescription =
      QueryStringProperty<Task>(_entities[0].properties[1]);

  /// see [Task.taskGroup]
  static final taskGroup =
      QueryStringProperty<Task>(_entities[0].properties[2]);

  /// see [Task.completed]
  static final completed =
      QueryBooleanProperty<Task>(_entities[0].properties[3]);

  /// see [Task.date]
  static final date = QueryIntegerProperty<Task>(_entities[0].properties[4]);
}

/// [TaskGroup] entity fields to define ObjectBox queries.
class TaskGroup_ {
  /// see [TaskGroup.id]
  static final id = QueryIntegerProperty<TaskGroup>(_entities[1].properties[0]);

  /// see [TaskGroup.taskGroup]
  static final taskGroup =
      QueryStringProperty<TaskGroup>(_entities[1].properties[1]);
}
